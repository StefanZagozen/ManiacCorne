/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <../boards/shields/corne/boards/nice_nano.overlay>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1100

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 21 30 32 20 31 33 34 38>;
            flavor = "balanced";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 25 26 29 14 17 27 16 15 28>;
            flavor = "balanced";
        };

        htlayer: htlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HTLAYER";
            bindings = <&mo>, <&lto_5>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        blmo_1: blmo_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "BLMO_1";
            bindings = <&lmo_1>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        blmo_2: blmo_2 {
            compatible = "zmk,behavior-hold-tap";
            label = "BLMO_2";
            bindings = <&lmo_2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        blmo_5: blmo_5 {
            compatible = "zmk,behavior-hold-tap";
            label = "BLMO_5";
            bindings = <&lmo_5>, <&lto_5>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        blmo_7: blmo_7 {
            compatible = "zmk,behavior-hold-tap";
            label = "BLMO_7";
            bindings = <&lmo_7>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        blmo_2l: blmo_2l {
            compatible = "zmk,behavior-hold-tap";
            label = "BLMO_2L";
            bindings = <&lmo_2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 18 6 7 19 31 32 20 8 9 21 33 34 22 10 35 23 11>;
        };

        blmo_2r: blmo_2r {
            compatible = "zmk,behavior-hold-tap";
            label = "BLMO_2R";
            bindings = <&lmo_2>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <25 13 1 2 14 26 27 15 3 4 5 17 16 28 29 24 12 0>;
        };

        hml_sens: hml_sens {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SENS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 21 30 32 20 31 33 34 38>;
            flavor = "hold-preferred";
        };

        hmr_sens: hmr_sens {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SENS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 25 26 29 14 17 27 16 15 28>;
            flavor = "hold-preferred";
        };
    };

    macros {
        lto_0: lon0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(66,100,51)>,
                <&macro_tap>,
                <&to 0>;

            label = "LON0";
        };

        lto_5: lon1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(190,100,50)>,
                <&macro_tap>,
                <&to 3>;

            label = "LON1";
        };

        lto_6: lon6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(295,100,50)>,
                <&macro_tap>,
                <&to 4>;

            label = "LON6";
        };

        lmo_5: lmo_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 3>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(190,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(66,100,51)>;

            label = "LMO_5";
        };

        lmo_1: lmo_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(28,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(66,100,51)>;

            label = "LMO_1";
        };

        lmo_2: lmo_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(0,100,50)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(66,100,51)>;

            label = "LMO_2";
        };

        lmo_7: lmo_7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 5>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(16,0,41)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 5>,
                <&macro_tap>,
                <&rgb_ug RGB_COLOR_HSB(66,100,51)>;

            label = "LMO_7";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_cut {
             bindings = <&kp LC(X)>;
             key-positions = <14 26>;
             layers = <0 2 4 3>;
             timeout-ms = <25>;
         };
 
         combo_copy {
             bindings = <&kp LC(C)>;
             key-positions = <27 15>;
             layers = <0 2 4 3>;
             timeout-ms = <25>;
         };
 
         combo_paste {
             bindings = <&kp LC(V)>;
             key-positions = <16 28>;
             layers = <0 2 3 4>;
             timeout-ms = <25>;
         };
 
         combo_undo {
             bindings = <&kp LC(Y)>;
             key-positions = <6 18>;
             layers = <0 2 3 4>;
             timeout-ms = <25>;
         };
 
         combo_select_all {
             bindings = <&kp LC(A)>;
             key-positions = <25 13>;
             layers = <0 2 4 3>;
             timeout-ms = <25>;
         };
        combo_auml {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <13 1>;
            layers = <0>;
            timeout-ms = <25>;
        };

        combo_suml {
            bindings = <&kp MINUS>;
            key-positions = <14 2>;
            layers = <0>;
            timeout-ms = <25>;
        };

        combu_uuml {
            bindings = <&kp LBKT>;
            key-positions = <19 7>;
            layers = <0>;
            timeout-ms = <25>;
        };

        combo_ouml {
            bindings = <&kp SEMI>;
            key-positions = <21 9>;
            layers = <0>;
            timeout-ms = <25>;
        };

        b_round_open {
            bindings = <&kp LS(N8)>;
            key-positions = <6 7>;
            layers = <0>;
        };

        b_round_close {
            bindings = <&kp LS(N9)>;
            key-positions = <8 7>;
            layers = <0>;
        };

        b_square_open {
            bindings = <&kp RA(N8)>;
            key-positions = <18 19>;
            layers = <0>;
        };

        b_square_close {
            bindings = <&kp RA(N9)>;
            key-positions = <19 20>;
            layers = <0>;
        };

        b_curley_open {
            bindings = <&kp RA(N7)>;
            key-positions = <30 31>;
            layers = <0>;
        };

        b_curley_close {
            bindings = <&kp RA(N0)>;
            key-positions = <31 32>;
            layers = <0>;
        };

        b_lt {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <4 3>;
            layers = <0>;
        };

        b_gt {
            bindings = <&kp RS(NON_US_BACKSLASH)>;
            key-positions = <4 5>;
            layers = <0>;
        };

        dollar {
            bindings = <&kp RS(NUMBER_4)>;
            key-positions = <16 17>;
        };

        and {
            bindings = <&kp RS(NUMBER_6)>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE              &kp Q            &kp W            &kp E                &kp R                   &kp T            &kp Y            &kp U                    &kp I                 &kp O             &kp P         &kp RS(RG(S))
&kp LG(LC(RIGHT))       &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml_sens LEFT_SHIFT F  &kp G            &kp H            &hmr_sens RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &kp LEFT_GUI  &kp RA(TAB)
&kp LG(LC(LEFT_ARROW))  &kp Z            &kp X            &kp C                &kp V                   &kp B            &kp N            &kp M                    &kp COMMA             &kp DOT           &kp FSLH      &kp LC(TAB)
                                                          &blmo_7 0 DEL        &kp BACKSPACE           &blmo_1 0 TAB    &blmo_2 0 ENTER  &kp SPACE                &blmo_5 0 5
            >;
        };

        numblock {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp F4   &kp F3   &kp F2   &kp F1  &none     &kp KP_MULTIPLY  &kp KP_N7        &kp KP_NUMBER_8  &kp KP_N9  &kp KP_PLUS   &trans
&trans  &kp F8   &kp F7   &kp F6   &kp F5  &none     &kp KP_DIVIDE    &kp KP_N4        &kp KP_N5        &kp KP_N6  &kp KP_MINUS  &trans
&trans  &kp F12  &kp F11  &kp F10  &kp F9  &trans    &kp KP_NUMLOCK   &kp KP_N1        &kp KP_N2        &kp KP_N3  &kp KP_DOT    &trans
                          &trans   &trans  &trans    &trans           &kp KP_NUMBER_0  &trans
            >;
        };

        Special-Chars {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans      &kp GRAVE                 &kp RS(GRAVE)      &kp NON_US_BACKSLASH  &kp RS(NON_US_BACKSLASH)  &none               &kp RA(RIGHT_BRACKET)  &kp LS(N8)        &kp LS(N9)        &none          &kp LS(NUMBER_0)  &trans
&caps_word  &kp RS(N1)                &kp RS(NUMBER_2)   &kp RS(N3)            &kp RS(N4)                &kp RS(NUMBER_5)    &kp LS(NUMBER_6)       &kp RA(NUMBER_8)  &kp RA(NUMBER_9)  &kp LS(EQUAL)  &kp LS(MINUS)     &trans
&trans      &kp RA(NON_US_BACKSLASH)  &kp LS(BACKSLASH)  &kp LS(NUMBER_7)      &kp RA(MINUS)             &none               &kp UNDER              &kp RA(N7)        &kp RA(NUMBER_0)  &kp LS(EQUAL)  &kp BACKSLASH     &trans
                                                         &trans                &trans                    &trans              &trans                 &trans            &trans
            >;
        };

        Arrow-Keys {
            bindings = <
&trans  &none         &none         &none             &none           &none      &none      &kp PG_UP  &kp UP_ARROW  &kp PG_DN  &none  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none      &none      &kp LEFT   &kp DOWN      &kp RIGHT  &none  &trans
&trans  &none         &none         &none             &none           &none      &none      &kp HOME   &kp DEL       &kp END    &none  &trans
                                    &lto_0            &trans          &kp TAB    &kp ENTER  &trans     &lto_6
            >;
        };

        Mouse {
            bindings = <
&trans  &none         &none         &none             &none           &none     &none     &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &none  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &none     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &trans
&trans  &none         &none         &none             &none           &none     &mkp MB3  &msc SCRL_LEFT  &kp DEL         &msc SCRL_RIGHT  &none  &trans
                                    &lto_0            &trans          &trans    &mkp MB2  &mkp MB1        &lto_5
            >;
        };

        cofiguration {
            bindings = <
&rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_ON     &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_OFF    &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none
&to 6            &none            &none            &none            &none            &none              &none          &none          &none          &none          &none          &bt BT_CLR
                                                   &trans           &none            &none              &none          &none          &none
            >;
        };

        gaming {
            bindings = <
&kp M         &kp TAB         &kp Q         &kp W         &kp E   &kp Z        &none  &none  &none  &none  &none  &none
&kp NUMBER_1  &kp LEFT_SHIFT  &kp A         &kp S         &kp D   &kp X        &none  &none  &none  &none  &none  &none
&kp NUMBER_2  &kp LCTRL       &kp NUMBER_3  &kp NUMBER_4  &kp N5  &kp C        &none  &none  &none  &none  &none  &none
                                            &kp F         &kp E   &kp SPACE    &none  &none  &to 0
            >;
        };
    };
};
